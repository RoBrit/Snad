plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

def mcBase = getMinorAndPatchFromMc()

group = 'com.robrit.snad'
version = "${mcBase}.${mod_version}"

base {
    archivesName = "Snad"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = "${mcBase}.${neo_version}"

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version.replace("\${mc_version}", minecraft_version)
    }

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }

        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "Snad",
                "Specification-Vendor"    : "RoBrit",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "RoBrit",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    dependsOn("sourcesJar")
}

tasks.register("sourcesJar", Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allJava
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version_range: forge_version_range,
            loader_version: loader_version,
            mod_id: mod_id,
            version: project.version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = project.version
    file = jar.archiveFile
    modLoaders.add("neoforge")
    type = STABLE
    displayName = "[${minecraft_version}] ${base.archivesName.get()} ${project.version}"

    curseforge {
        projectId = curseforge_id
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        minecraftVersions.add("${minecraft_version}")
        minecraftVersions.add("1.21.3")
        javaVersions.add(JavaVersion.VERSION_21)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
//#region helpers
/**
 * Removes the 1. from Minecraft's version, then adds a 0 to the end if the
 * version does not contain three dots.
 */
def getMinorAndPatchFromMc() {
    String mcVersion = project.minecraft_version
    String[] split = mcVersion.split("\\.")
    return split[1] + "." + (split[2] ?: "0")
}
//#endregion
