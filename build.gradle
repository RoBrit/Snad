plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

apply {
    // "Simple" fix for M1 (Apple Silicon) macs in the dev environment... All thanks to @mezz
    from "https://raw.githubusercontent.com/mezz/JustEnoughItems/1.18/Forge/buildtools/AppleSiliconSupport.gradle"
}

def mcBase = getMinecraftBaseVersion()

group = 'com.robrit.snad'
version = "${mcBase}.${mod_version}"

base {
    archivesName = "Snad"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: project.minecraft_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "Snad",
                "Specification-Vendor"    : "RoBrit",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "RoBrit",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}



tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version_range: forge_version_range,
            loader_version: loader_version,
            mod_id: mod_id,
            version: project.version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
//            artifactId = project.name.toLowerCase()
        }
    }

    repositories {
        def actor = providers.environmentVariable("GITHUB_ACTOR")
        if (actor.isPresent()) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/RoBrit/Snad"
                credentials {
                    username = actor.get()
                    password = providers.environmentVariable("GITHUB_TOKEN").get()
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = project.version
    file = project.provider { project.tasks.jar }.flatMap { it.archiveFile }
    modLoaders.add("forge")
    type = STABLE
    displayName = "[${minecraft_version}] ${base.archivesName.get()} ${project.version}"

    curseforge {
        projectId = curseforge_id
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        minecraftVersions.add("${minecraft_version}")
        javaVersions.add(JavaVersion.VERSION_17)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

//#region helpers
/**
 * Removes the 1. from Minecraft's version, then adds a 0 to the end if the
 * version does not contain three dots.
 */
def getMinecraftBaseVersion() {
    def version = project.minecraft_version
    def parts = version.split("\\.")

    // Remove the first part of the version
    parts = parts[1..-1]

    if (parts.size() < 2) {
        parts << "0"
    }

    return parts.join(".")
}
//#endregion
